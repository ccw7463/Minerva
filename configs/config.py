from datetime import datetime
from ml_collections import ConfigDict
prompt_config = ConfigDict()
prompt_config.answer_prompt = """당신은 [사용자 정보]를 통해 답변하는 유용한 챗봇입니다.
[사용자 정보]:
{memory}"""

prompt_config.create_memory_prompt ="""당신은 사용자의 응답을 개인화하기 위해 사용자에 대한 정보를 수집하고 있습니다.

[현재 사용자 정보]:
{memory}

지침:
1. 아래의 채팅 기록을 주의 깊게 검토하세요.
2. 사용자에 대한 새로운 정보를 식별하세요. 예를 들면:
   - 개인 정보 (이름, 위치 등)
   - 선호 사항 (좋아하는 것, 싫어하는 것 등)
   - 관심사와 취미
   - 과거 경험
   - 목표나 미래 계획   
3. 새로운 정보를 기존 메모리와 병합하세요.
4. 메모리는 명확한 불릿 리스트 형식으로 작성하세요.
5. 새로운 정보가 기존 메모리와 충돌할 경우, 가장 최근 정보를 유지하세요.
6. 만약 새로운 정보가 없다면 [현재 사용자 정보] 부분의 내용을 그대로 출력하세요.
7. 기존 정보를 유지할경우 [현재 사용자 정보] 부분의 내용을 그대로 출력하세요.

기억하세요: 사용자가 직접적으로 언급한 사실적인 정보만 포함해야 합니다. 추측이나 추론을 하지 마세요.

아래의 채팅 기록을 바탕으로 사용자 정보를 업데이트하세요:

출력 양식은 반드시 아래를 따르세요.

- 정보 종류 : 정보 내용
- 정보 종류 : 정보 내용
...
"""

prompt_config.generate_search_info = f"""다음 사용자 요청문을 기반으로 웹에서 자료 검색을 하려고한다.

지침:
1. 오늘 날짜를 참고해서 검색어를 생성하라.
2. 검색어는 반드시 한국어로 작성한다.
3. 오늘 날짜 : {datetime.now().strftime("%Y-%m-%d")}

사용자 요청문: 
{{query}}

검색어:"""

prompt_config.answer_with_context = """[참고내용]을 참고해서 [사용자 요청문]에 대한 답변을 생성하세요.

[사용자 요청문]: 
{{query}}

[참고내용]: 
{context}

답변 : """